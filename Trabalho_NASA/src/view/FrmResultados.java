/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import Controller.*;
import Model.*;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 */
public class FrmResultados extends javax.swing.JFrame {

    private final MenuController menu;
    private final AsteroideController controller = new AsteroideController();
    private final OpcoesOrdenacaoController optionsController = new OpcoesOrdenacaoController();
    private final OpcoesDeFitroController filtrosController = new OpcoesDeFitroController();
    private final UtilsController utilCOntroller = new UtilsController();
    
    private final ArrayList<OpcoesOrdenacao> options = optionsController.getOpcoesDeOrdenacao();
    private final DefaultComboBoxModel modelOrdenacao = new DefaultComboBoxModel<>(options.toArray(new OpcoesOrdenacao[0]));
    
    private final ArrayList<OpcoesDeFitro> optionsFiltros;
    private final DefaultComboBoxModel modelFiltros;
    /**
     * Creates new form FrmResultados
     */
    public FrmResultados() {
        // pega as opções do combo box do Filtro
        optionsFiltros = filtrosController.getOpcoesDeFiltro();
        
        // Adiciona a opção Tidis no combo box do filtro
        optionsFiltros.addFirst(new OpcoesDeFitro("Todos", "Todos"));
        
        // Coloca o modelo de opções no combo box do filtro
        modelFiltros = new DefaultComboBoxModel<>(optionsFiltros.toArray(new OpcoesDeFitro[0]));
        
        initComponents();
        // Controller do menu
        menu = new MenuController(this);

        // Pegando lista de asteroides já ordenada
        ArrayList<Asteroide> asteroidesOrdenado = controller.getAsteroidesOrdenacao(options.get(0).getOrdenacao());
        
        // Caregando a tabela
        carregaTable(asteroidesOrdenado);
        
        // Esconde o combo box dos campos do filtro para aparecer só quando selecionar o filtro
        panelFiltroValor.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableResultados = new javax.swing.JTable();
        ordenacaoInput = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        campoFiltro = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        panelFiltroValor = new javax.swing.JPanel();
        valorFiltro = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        menuDashboard = new javax.swing.JMenuItem();
        menuSair = new javax.swing.JMenuItem();
        menuDados = new javax.swing.JMenu();
        menuAtualizar = new javax.swing.JMenuItem();
        menuResultados = new javax.swing.JMenuItem();
        menuConfiguracaoPai = new javax.swing.JMenu();
        menuConfiguracao = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        menuSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(200, 150, 0, 0));
        setMinimumSize(new java.awt.Dimension(1000, 500));

        tableResultados.setAutoCreateRowSorter(true);
        tableResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Data de Aproximação", "Velocidade Relativa", "Distância mínima", "Diâmetro Estimado", "Corpo orbitante", "Perigoso", "Nível de Ameaça"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableResultados);

        ordenacaoInput.setModel(this.modelOrdenacao);
        ordenacaoInput.setToolTipText("");
        ordenacaoInput.setPrototypeDisplayValue("Selecione");
        ordenacaoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordenacaoInputActionPerformed(evt);
            }
        });

        jLabel1.setText("Ordenar:");

        campoFiltro.setModel(this.modelFiltros);
        campoFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoFiltroActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Filtrar pelo campo:");

        valorFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorFiltroActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Filtrar pelo valor:");

        javax.swing.GroupLayout panelFiltroValorLayout = new javax.swing.GroupLayout(panelFiltroValor);
        panelFiltroValor.setLayout(panelFiltroValorLayout);
        panelFiltroValorLayout.setHorizontalGroup(
            panelFiltroValorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroValorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelFiltroValorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valorFiltro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelFiltroValorLayout.setVerticalGroup(
            panelFiltroValorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroValorLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valorFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        menuArquivo.setText("Arquivo");

        menuDashboard.setText("Dashboard");
        menuDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDashboardActionPerformed(evt);
            }
        });
        menuArquivo.add(menuDashboard);

        menuSair.setText("Sair");
        menuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSairActionPerformed(evt);
            }
        });
        menuArquivo.add(menuSair);

        jMenuBar1.add(menuArquivo);

        menuDados.setText("Dados");

        menuAtualizar.setText("Atualizar dados");
        menuAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAtualizarActionPerformed(evt);
            }
        });
        menuDados.add(menuAtualizar);

        menuResultados.setText("Resultados");
        menuResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResultadosActionPerformed(evt);
            }
        });
        menuDados.add(menuResultados);

        jMenuBar1.add(menuDados);

        menuConfiguracaoPai.setText("Configurações");

        menuConfiguracao.setText("Preferências");
        menuConfiguracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConfiguracaoActionPerformed(evt);
            }
        });
        menuConfiguracaoPai.add(menuConfiguracao);

        jMenuBar1.add(menuConfiguracaoPai);

        menuAjuda.setText("Ajuda");

        menuSobre.setText("Sobre");
        menuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSobreActionPerformed(evt);
            }
        });
        menuAjuda.add(menuSobre);

        jMenuBar1.add(menuAjuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ordenacaoInput, 0, 233, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelFiltroValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(campoFiltro, 0, 245, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ordenacaoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panelFiltroValor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDashboardActionPerformed
        menu.telaAtualiza(new FrmHome());
    }//GEN-LAST:event_menuDashboardActionPerformed

    private void menuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSairActionPerformed
        menu.Sair();
    }//GEN-LAST:event_menuSairActionPerformed

    private void menuAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAtualizarActionPerformed
        menu.telaAtualiza(new FrmAtualizar());
    }//GEN-LAST:event_menuAtualizarActionPerformed

    private void menuResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResultadosActionPerformed
        menu.telaAtualiza(new FrmResultados());
    }//GEN-LAST:event_menuResultadosActionPerformed

    private void menuConfiguracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConfiguracaoActionPerformed
        menu.telaAtualiza(new FrmConfiguracao());
    }//GEN-LAST:event_menuConfiguracaoActionPerformed

    private void menuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSobreActionPerformed
        menu.telaAtualiza(new FrmSobre());
    }//GEN-LAST:event_menuSobreActionPerformed

    private void ordenacaoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordenacaoInputActionPerformed
        OpcoesDeFitro filtro = (OpcoesDeFitro) campoFiltro.getSelectedItem();
        
        // Verifica se tem algum filtro selecionado para ordendar com filtro ou só ordenar
        if(valorFiltro.getSelectedItem() != null && !filtro.getTextoNome().equals("Todos") && valorFiltro.getSelectedItem().equals("-- Selecione --")){
            this.filtraTabela();
        } else {
            // Pegando lista de asteroides ordenada conforme o objeto selecionado no combo box
            OpcoesOrdenacao selectedOption = (OpcoesOrdenacao) ordenacaoInput.getSelectedItem();
            ArrayList<Asteroide> asteroidesOrdenado = controller.getAsteroidesOrdenacao(selectedOption.getOrdenacao());

            // Caregando a tabela
            carregaTable(asteroidesOrdenado);
        }
        
        
    }//GEN-LAST:event_ordenacaoInputActionPerformed

    private void valorFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorFiltroActionPerformed
        this.filtraTabela();
    }//GEN-LAST:event_valorFiltroActionPerformed

    private void campoFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoFiltroActionPerformed
        OpcoesDeFitro filtro = (OpcoesDeFitro) campoFiltro.getSelectedItem();

        if(filtro.getTextoNome().equals("Todos")){
            // Esconde o combo box dos campos de filtro
            panelFiltroValor.setVisible(false);
            
            // Pegando lista de asteroides ordenada conforme o objeto selecionado no combo box de ordenação
            OpcoesOrdenacao selectedOption = (OpcoesOrdenacao) ordenacaoInput.getSelectedItem();
            ArrayList<Asteroide> asteroidesOrdenado = controller.getAsteroidesOrdenacao(selectedOption.getOrdenacao());

            // Caregando a tabela
            carregaTable(asteroidesOrdenado);
        } else {
            // Mostra o combo box dos campos de filtro
            panelFiltroValor.setVisible(true);
            
            // Verifica se o filtro selecionado é os que vem como string direto ou vem com os indices mínimos e máximos
            if(filtro.getColuna().equals("nivel_ameaca") || filtro.getColuna().equals("potencialmente_perigoso")){
                // Pega os campos conforme o filtro selecionado
                ArrayList<String> campos = utilCOntroller.getFiltrosColuna(filtro.getColuna());
                
                // Adiciona a primeira opção como placeholder
                campos.addFirst("-- Selecione --");
                
                // Troca o 0 e 1 do perigo para Sim e Não
                if(filtro.getColuna().equals("potencialmente_perigoso")){
                    for (int i = 0; i < campos.size(); i++) {
                        if(campos.get(i).equals("0")){
                            campos.set(i, "Não");
                        } else if(campos.get(i).equals("1")){
                            campos.set(i, "Sim");
                        } 
                    }
                }

                // Seta o modelo do combo box
                DefaultComboBoxModel modelFiltroCampo = new DefaultComboBoxModel<>(campos.toArray());
                valorFiltro.setModel(modelFiltroCampo);
            } else {
                // Pega os campos conforme o filtro selecionado
                ArrayList<Utils> campos = utilCOntroller.getFiltrosColunaDouble(filtro.getColuna());
                // Adiciona a primeira opção como placeholder do tipo dos campos
                campos.addFirst(new Utils("-- Selecione --", (double) 0,  (double) 0));

                // Seta o texto que aparecerá no combo box
                campos.get(0).setTexto("-- Selecione --");
                
                // Seta o texto que aparecerá no combo box, juntando os valores minimos e máximos
                for (int i = 0; i < campos.size(); i++) {
                    if(i != 0){
                        campos.get(i).setTexto(campos.get(i).getMin() + " até " + campos.get(i).getMax());
                    }
                }
                
                // Seta o modelo do combo box
                DefaultComboBoxModel modelFiltroCampo = new DefaultComboBoxModel<>(campos.toArray(new Utils[0]));
                valorFiltro.setModel(modelFiltroCampo);
            }
        }
    }//GEN-LAST:event_campoFiltroActionPerformed

    
    private void carregaTable(ArrayList<Asteroide> asteroides) {
        // Pega o modelo da tabela
        DefaultTableModel tbl = (DefaultTableModel) tableResultados.getModel();
        tbl.setRowCount(0);
        
        for (int i = 0; i < asteroides.size(); i++) {
            Object[] linha = new Object[8];
            Asteroide temp = asteroides.get(i);
            linha[0] = temp.getNome();
            
            // Formatando data de aproximação para um formato amigavel
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            linha[1] = temp.getData_aproximacao_maxima().format(formatter);
            
            linha[2] = temp.getVelocidade_relativa_em_kms();
            linha[3] = temp.getDistancia_min_da_terra_em_km();
            linha[4] = temp.getDiametro_estimado_em_km();
            linha[5] = temp.getCorpo_orbitante();
            
            // Trocando o valor Booleano por uma string mais legivel 
            linha[6] = temp.getPotencialmente_perigoso() ? "Sim" : "Não";
            linha[7] = temp.getNivel_ameaca();
            
            tbl.addRow(linha);
        }

    }
    
    private void filtraTabela(){
        // Pega o filtro selecionado
        OpcoesDeFitro filtro = (OpcoesDeFitro) campoFiltro.getSelectedItem();
        
        // verifica o tipo de filtro seleciona para ver se é somente a string de valor ou os valores minimos e maximos
        if(filtro.getColuna().equals("nivel_ameaca") || filtro.getColuna().equals("potencialmente_perigoso")){
            String campo = (String) valorFiltro.getSelectedItem();
            
            // Troca os campos do potencialmente_perigoso de strings para 0 e 1
            if(campo.equals("Não")){
                campo = "0";
            } else  if(campo.equals("Sim")) {
                campo = "1";
            }
            
            // Pega a ordenação para mandar junto
            OpcoesOrdenacao selectedOption = (OpcoesOrdenacao) ordenacaoInput.getSelectedItem();
            
            // Pega a lista de asteroides ordenada e filtrada
            ArrayList<Asteroide> asteroidesOrdenado = controller.getAsteroidesFiltroEOrdenacao(selectedOption.getOrdenacao(), filtro.getColuna(), campo);

            // Caregando a tabela
            carregaTable(asteroidesOrdenado);
        } else {
            Utils campo = (Utils) valorFiltro.getSelectedItem();
            
            // Pega a ordenação para mandar junto
            OpcoesOrdenacao selectedOption = (OpcoesOrdenacao) ordenacaoInput.getSelectedItem();
            
            // Pega a lista de asteroides ordenada e filtrada
            ArrayList<Asteroide> asteroidesOrdenado = controller.getAsteroidesFiltroEOrdenacao(selectedOption.getOrdenacao(), filtro.getColuna(), campo.getMin(), campo.getMax());

            // Caregando a tabela
            carregaTable(asteroidesOrdenado);
        }
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmResultados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> campoFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenuItem menuAtualizar;
    private javax.swing.JMenuItem menuConfiguracao;
    private javax.swing.JMenu menuConfiguracaoPai;
    private javax.swing.JMenu menuDados;
    private javax.swing.JMenuItem menuDashboard;
    private javax.swing.JMenuItem menuResultados;
    private javax.swing.JMenuItem menuSair;
    private javax.swing.JMenuItem menuSobre;
    private javax.swing.JComboBox<String> ordenacaoInput;
    private javax.swing.JPanel panelFiltroValor;
    private javax.swing.JTable tableResultados;
    private javax.swing.JComboBox<String> valorFiltro;
    // End of variables declaration//GEN-END:variables
}
